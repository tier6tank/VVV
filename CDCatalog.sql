/* Please note that this script doesn't maintain
   proper order of creation for computed columns if
   they reference other tables.  */

/********************* ROLES **********************/

/********************* UDFS ***********************/

/****************** GENERATORS ********************/

CREATE GENERATOR GEN_FILES_ID;
CREATE GENERATOR GEN_PATHS_ID;
CREATE GENERATOR GEN_VIRTUAL_FILES_ID;
CREATE GENERATOR GEN_VIRTUAL_PATHS_ID;
CREATE GENERATOR GEN_VOLUMES_ID;
/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

SET TERM ^ ;
CREATE PROCEDURE SP_ADD_PHYSFILE_TO_VIRTUALPATH (
    PHYS_FILE_ID Numeric(18,0),
    VIRTUAL_PATH_ID Numeric(18,0) )
AS
BEGIN EXIT; END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_ADD_PHYSPATH_TO_VIRTUALPATH (
    PHYS_PATH_ID Numeric(18,0),
    VIRTUAL_PATH_ID Numeric(18,0) )
AS
BEGIN EXIT; END^
SET TERM ; ^

SET TERM ^ ;
CREATE PROCEDURE SP_DELETE_VOLUME (
    VOLUME_ID Numeric(18,0) )
AS
BEGIN EXIT; END^
SET TERM ; ^

/******************** TABLES **********************/

CREATE TABLE FILES
(
  FILE_ID Numeric(18,0) NOT NULL,
  FILE_NAME Varchar(500) CHARACTER SET ISO8859_1,
  FILE_SIZE Numeric(18,0),
  FILE_EXT Varchar(50) CHARACTER SET ISO8859_1,
  FILE_DATETIME Timestamp,
  PATH_ID Numeric(18,0),
  IS_FOLDER Char(1),
  CONSTRAINT PK_FILES PRIMARY KEY (FILE_ID)
);
CREATE TABLE PATHS
(
  PATH_ID Numeric(18,0) NOT NULL,
  VOLUME_ID Numeric(18,0) NOT NULL,
  PATH_NAME Varchar(500) CHARACTER SET ISO8859_1 NOT NULL,
  FATHER_ID Numeric(18,0),
  CONSTRAINT PK_PATHS PRIMARY KEY (PATH_ID)
);
CREATE TABLE VIRTUAL_FILES
(
  FILE_ID Numeric(18,0) NOT NULL,
  VIRTUAL_PATH_ID Numeric(18,0) NOT NULL,
  PHYSICAL_FILE_ID Numeric(18,0) NOT NULL,
  CONSTRAINT PK_VIRTUAL_FILES PRIMARY KEY (FILE_ID)
);
CREATE TABLE VIRTUAL_PATHS
(
  PATH_ID Numeric(18,0) NOT NULL,
  PATH Varchar(500) NOT NULL,
  FATHER_ID Numeric(18,0),
  PHYS_PATH_ID Numeric(18,0),
  CONSTRAINT PK_VIRTUAL_PATHS PRIMARY KEY (PATH_ID)
);
CREATE TABLE VOLUMES
(
  VOLUME_ID Numeric(18,0) NOT NULL,
  VOLUME_NAME Varchar(100) CHARACTER SET ISO8859_1 NOT NULL,
  CONSTRAINT PK_VOLUMES PRIMARY KEY (VOLUME_ID),
  CONSTRAINT UNQ_VOLUMES UNIQUE (VOLUME_NAME)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER FILES_BI FOR FILES ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.FILE_ID IS NULL) THEN 
    NEW.FILE_ID = GEN_ID(GEN_FILES_ID,1); 
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER PATHS_BI FOR PATHS ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.PATH_ID IS NULL) THEN 
    NEW.PATH_ID = GEN_ID(GEN_PATHS_ID,1); 
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER VIRTUAL_FILES_BI FOR VIRTUAL_FILES ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.FILE_ID IS NULL) THEN
    NEW.FILE_ID = GEN_ID(GEN_VIRTUAL_FILES_ID,1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER VIRTUAL_PATHS_BI FOR VIRTUAL_PATHS ACTIVE
BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.PATH_ID IS NULL) THEN
    NEW.PATH_ID = GEN_ID(GEN_VIRTUAL_PATHS_ID,1);
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER VOLUMES_BI FOR VOLUMES ACTIVE
BEFORE INSERT POSITION 0
AS 
BEGIN 
  IF (NEW.VOLUME_ID IS NULL) THEN 
    NEW.VOLUME_ID = GEN_ID(GEN_VOLUMES_ID,1); 
END^
SET TERM ; ^

SET TERM ^ ;
ALTER PROCEDURE SP_ADD_PHYSFILE_TO_VIRTUALPATH (
    PHYS_FILE_ID Numeric(18,0),
    VIRTUAL_PATH_ID Numeric(18,0) )
AS
begin
    if (not (exists( select FILE_ID
                   from VIRTUAL_FILES
                   where VIRTUAL_PATH_ID = :VIRTUAL_PATH_ID and PHYSICAL_FILE_ID = :PHYS_FILE_ID )))
                   then
    begin
        insert into virtual_files ( VIRTUAL_PATH_ID, PHYSICAL_FILE_ID )
        values ( :VIRTUAL_PATH_ID, :PHYS_FILE_ID );
    end
end^
SET TERM ; ^

GRANT EXECUTE
 ON PROCEDURE SP_ADD_PHYSFILE_TO_VIRTUALPATH TO  SYSDBA;

UPDATE RDB$PROCEDURE_PARAMETERS set RDB$DESCRIPTION = 'FILES.FILE_ID of the file to be added'
  where RDB$PARAMETER_NAME = 'PHYS_FILE_ID' AND RDB$PROCEDURE_NAME = 'SP_ADD_PHYSFILE_TO_VIRTUALPATH';
UPDATE RDB$PROCEDURE_PARAMETERS set RDB$DESCRIPTION = 'Primary key of the virtual folder that will receive the file'
  where RDB$PARAMETER_NAME = 'VIRTUAL_PATH_ID' AND RDB$PROCEDURE_NAME = 'SP_ADD_PHYSFILE_TO_VIRTUALPATH';

SET TERM ^ ;
ALTER PROCEDURE SP_ADD_PHYSPATH_TO_VIRTUALPATH (
    PHYS_PATH_ID Numeric(18,0),
    VIRTUAL_PATH_ID Numeric(18,0) )
AS
declare variable file_id bigint;
declare variable path_id bigint;
declare variable vpath_id bigint;
declare variable path_name varchar(500);
begin
    -- copies all files in the current folder
    for select FILE_ID
    from FILES
    where PATH_ID = :PHYS_PATH_ID
    into
        :FILE_ID
    do
    begin
        execute procedure SP_ADD_PHYSFILE_TO_VIRTUALPATH( :FILE_ID, :VIRTUAL_PATH_ID );
    end
    -- recursion in the subfolders
    for select PATH_ID, PATH_NAME
    from PATHS
    where FATHER_ID = :PHYS_PATH_ID
    into
         :PATH_ID, :PATH_NAME
    do
    begin
        VPATH_ID = gen_id( GEN_VIRTUAL_PATHS_ID, 1 );
        insert into VIRTUAL_PATHS ( PATH_ID, PATH, FATHER_ID, PHYS_PATH_ID )
        values ( :VPATH_ID, :PATH_NAME, :VIRTUAL_PATH_ID, :PATH_ID );
        execute procedure SP_ADD_PHYSPATH_TO_VIRTUALPATH( :PATH_ID, VPATH_ID );
    end
end^
SET TERM ; ^

GRANT EXECUTE
 ON PROCEDURE SP_ADD_PHYSPATH_TO_VIRTUALPATH TO  SYSDBA;


SET TERM ^ ;
ALTER PROCEDURE SP_DELETE_VOLUME (
    VOLUME_ID Numeric(18,0) )
AS
declare variable path_id bigint;
begin
  /* reads all the paths for the given volume in descending order
     to avoid problem with referential integrity: it deletes first
     rows inserted last */
  for select PATH_ID
      from PATHS
      where VOLUME_ID = :VOLUME_ID
      order by PATH_ID desc
  into
      :PATH_ID
  do
  begin
      delete from FILES where PATH_ID = :PATH_ID;
      delete from PATHS where PATH_ID = :PATH_ID;
  end
  delete from VOLUMES where VOLUME_ID = :VOLUME_ID;
end^
SET TERM ; ^

GRANT EXECUTE
 ON PROCEDURE SP_DELETE_VOLUME TO  SYSDBA;


ALTER TABLE FILES ADD CONSTRAINT FK_FILES_PATHS
  FOREIGN KEY (PATH_ID) REFERENCES PATHS (PATH_ID);
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON FILES TO  SYSDBA WITH GRANT OPTION;

UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'ID of the path of the father folder, NULL if none'  where RDB$FIELD_NAME = 'FATHER_ID' and RDB$RELATION_NAME = 'PATHS';
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_PATHS
  FOREIGN KEY (FATHER_ID) REFERENCES PATHS (PATH_ID);
ALTER TABLE PATHS ADD CONSTRAINT FK_PATHS_VOLUMES
  FOREIGN KEY (VOLUME_ID) REFERENCES VOLUMES (VOLUME_ID);
ALTER TABLE PATHS ADD CONSTRAINT CHK1_PATHS
  check ((FATHER_ID <> PATH_ID) OR (FATHER_ID IS NULL));
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PATHS TO  SYSDBA WITH GRANT OPTION;

ALTER TABLE VIRTUAL_FILES ADD CONSTRAINT FK_VIRTUAL_FILES_FILES
  FOREIGN KEY (PHYSICAL_FILE_ID) REFERENCES FILES (FILE_ID);
ALTER TABLE VIRTUAL_FILES ADD CONSTRAINT FK_VIRTUAL_FILES_VIRTUAL_PATHS
  FOREIGN KEY (VIRTUAL_PATH_ID) REFERENCES VIRTUAL_PATHS (PATH_ID);
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON VIRTUAL_FILES TO  SYSDBA WITH GRANT OPTION;

UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'Points the corresponding real folder, if there is one.
If this is a virtual path created by the user it is NULL.'  where RDB$FIELD_NAME = 'PHYS_PATH_ID' and RDB$RELATION_NAME = 'VIRTUAL_PATHS';
ALTER TABLE VIRTUAL_PATHS ADD CONSTRAINT FK_VIRTUAL_PATHS_PATHS
  FOREIGN KEY (PHYS_PATH_ID) REFERENCES PATHS (PATH_ID);
ALTER TABLE VIRTUAL_PATHS ADD CONSTRAINT FK_VIRTUAL_PATHS_VIRTUAL_PATHS
  FOREIGN KEY (FATHER_ID) REFERENCES VIRTUAL_PATHS (PATH_ID);
ALTER TABLE VIRTUAL_PATHS ADD CONSTRAINT CHK1_VIRTUAL_PATHS
  check ((FATHER_ID IS NULL) OR ( FATHER_ID <> PATH_ID));
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON VIRTUAL_PATHS TO  SYSDBA WITH GRANT OPTION;

UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'Stores the folders structure for the virtual view'
where RDB$RELATION_NAME = 'VIRTUAL_PATHS';
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON VOLUMES TO  SYSDBA WITH GRANT OPTION;

