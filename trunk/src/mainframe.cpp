/*
	This file is part of VVV (Virtual Volumes View)

	Copyright (C) 2007, the VVV Development team

	Author: Fulvio Senore

    VVV is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with VVV; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     29/12/2006 12:41:00
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 29/12/2006 12:41:00

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "mainframe.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "catalog_volume.h"
////@end includes

#include "mainframe.h"
#include "catalog_volume.h"

////@begin XPM images
////@end XPM images

/*!
 * CMainFrame type definition
 */

IMPLEMENT_CLASS( CMainFrame, wxFrame )

/*!
 * CMainFrame event table definition
 */

BEGIN_EVENT_TABLE( CMainFrame, wxFrame )

////@begin CMainFrame event table entries
    EVT_MENU( wxID_EXIT, CMainFrame::OnEXITClick )

    EVT_MENU( ID_CATALOG_VOLUME, CMainFrame::OnCatalogVolumeClick )

////@end CMainFrame event table entries

END_EVENT_TABLE()

/*!
 * CMainFrame constructors
 */

CMainFrame::CMainFrame( )
{
    Init();
}

CMainFrame::CMainFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}

/*!
 * Prova creator
 */

bool CMainFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CMainFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CMainFrame creation
    return true;
}

/*!
 * Member initialisation 
 */

void CMainFrame::Init()
{
////@begin CMainFrame member initialisation
////@end CMainFrame member initialisation
}
/*!
 * Control creation for Prova
 */

void CMainFrame::CreateControls()
{    
////@begin CMainFrame content construction
    // Generated by DialogBlocks, 31/12/2006 19:36:51 (unregistered)

    CMainFrame* itemFrame1 = this;

    wxMenuBar* menuBar = new wxMenuBar;
    wxMenu* itemMenu3 = new wxMenu;
    itemMenu3->Append(wxID_OPEN, _("Open"), _T(""), wxITEM_NORMAL);
    itemMenu3->AppendSeparator();
    itemMenu3->Append(wxID_EXIT, _("Exit"), _T(""), wxITEM_NORMAL);
    menuBar->Append(itemMenu3, _("File"));
    wxMenu* itemMenu7 = new wxMenu;
    itemMenu7->Append(ID_CATALOG_VOLUME, _("Catalog volume"), _T(""), wxITEM_NORMAL);
    menuBar->Append(itemMenu7, _("Volumes"));
    itemFrame1->SetMenuBar(menuBar);

    wxStatusBar* itemStatusBar9 = new wxStatusBar( itemFrame1, ID_STATUSBAR1, wxST_SIZEGRIP );
    itemStatusBar9->SetFieldsCount(2);
    itemFrame1->SetStatusBar(itemStatusBar9);

    wxSplitterWindow* itemSplitterWindow10 = new wxSplitterWindow( itemFrame1, ID_SPLITTERWINDOW1, wxDefaultPosition, wxSize(100, 100), wxSP_3DBORDER|wxSP_3DSASH|wxSP_NO_XP_THEME|wxNO_BORDER );
    itemSplitterWindow10->SetMinimumPaneSize(0);

    wxTreeCtrl* itemTreeCtrl11 = new wxTreeCtrl( itemSplitterWindow10, ID_TREECTRL1, wxDefaultPosition, wxSize(100, 100), wxTR_HAS_BUTTONS |wxTR_SINGLE|wxNO_BORDER|wxTR_DEFAULT_STYLE );

    wxListCtrl* itemListCtrl12 = new wxListCtrl( itemSplitterWindow10, ID_LISTCTRL1, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT|wxNO_BORDER );

    itemSplitterWindow10->SplitVertically(itemTreeCtrl11, itemListCtrl12, 50);

////@end CMainFrame content construction
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT
 */

void CMainFrame::OnEXITClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT in Prova.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT in Prova. 
}

/*!
 * Should we show tooltips?
 */

bool CMainFrame::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CMainFrame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CMainFrame bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CMainFrame bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CMainFrame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CMainFrame icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CMainFrame icon retrieval
}
/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_CATALOG_VOLUME
 */

void CMainFrame::OnCatalogVolumeClick( wxCommandEvent& event )
{
	event.Skip(false);	// to suppress a warning
////@begin wxEVT_COMMAND_MENU_SELECTED event handler for ID_CATALOG_VOLUME in CMainFrame.
    // Before editing this code, remove the block markers.
    CDialogCatalogVolume* window = new CDialogCatalogVolume(this, ID_DIALOG_CATALOG_VOLUME, _("Catalog volume"));
    window->Show(true);
////@end wxEVT_COMMAND_MENU_SELECTED event handler for ID_CATALOG_VOLUME in CMainFrame. 
}


